// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Patient.Persistence;

#nullable disable

namespace Patient.Persistence.Migrations
{
    [DbContext(typeof(PatientDbContext))]
    [Migration("20250422105457_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GivenNameName", b =>
                {
                    b.Property<Guid>("GivenNamesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("NamesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GivenNamesId", "NamesId");

                    b.HasIndex("NamesId");

                    b.ToTable("NameGivenNames", (string)null);
                });

            modelBuilder.Entity("Patient.Domain.GivenName", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GivenNames");
                });

            modelBuilder.Entity("Patient.Domain.Name", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Family")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Use")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PatientId")
                        .IsUnique()
                        .HasFilter("[PatientId] IS NOT NULL");

                    b.ToTable("Names");
                });

            modelBuilder.Entity("Patient.Domain.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("GivenNameName", b =>
                {
                    b.HasOne("Patient.Domain.GivenName", null)
                        .WithMany()
                        .HasForeignKey("GivenNamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Patient.Domain.Name", null)
                        .WithMany()
                        .HasForeignKey("NamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Patient.Domain.Name", b =>
                {
                    b.HasOne("Patient.Domain.Patient", null)
                        .WithOne("Name")
                        .HasForeignKey("Patient.Domain.Name", "PatientId");
                });

            modelBuilder.Entity("Patient.Domain.Patient", b =>
                {
                    b.Navigation("Name")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
